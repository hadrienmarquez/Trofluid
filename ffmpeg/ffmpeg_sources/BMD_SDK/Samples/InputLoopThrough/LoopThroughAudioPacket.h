/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <atomic>
#include <functional>
#include <memory>
#include "DeckLinkAPI.h"

class LoopThroughAudioPacket
{
public:
	// Allow construction of LoopThroughAudioPacket with optional deleter so the buffer can be released externally
	using Deleter = std::function<void(void)>;
	
	LoopThroughAudioPacket(void* audioBuffer, long sampleFrameCount, const Deleter& deleter = nullptr) :
		m_audioBuffer(audioBuffer),
		m_sampleFrameCount(sampleFrameCount),
		m_deleter(deleter),
		m_audioStreamTime(0),
		m_inputPacketArrivedHardwareTime(0),
		m_outputPacketScheduledHardwareTime(0)
	{
	}
	
	virtual ~LoopThroughAudioPacket(void)
	{
		// If constructed with deleter, call to release/free buffer
		if (m_deleter)
			m_deleter();
	};

	void*			getBuffer(void) const { return m_audioBuffer; }
	long			getSampleFrameCount(void) const { return m_sampleFrameCount; }

	void			setAudioPacket(void* audioBuffer, long sampleFrameCount, const Deleter& deleter = nullptr)
	{
		if (m_deleter)
			// Call deleter on previously assigned buffer
			m_deleter();
		
		m_audioBuffer		= audioBuffer;
		m_sampleFrameCount	= sampleFrameCount;
		m_deleter			= deleter;
	}
	
	void			setAudioStreamTime(const BMDTimeValue time) { m_audioStreamTime = time; }
	void			setInputPacketArrivedHardwareTime(const BMDTimeValue time) { m_inputPacketArrivedHardwareTime = time; }
	void			setOutputPacketScheduledHardwareTime(const BMDTimeValue time) { m_outputPacketScheduledHardwareTime = time; }

	BMDTimeValue	getAudioStreamTime(void) const { return m_audioStreamTime; }
	BMDTimeValue	getProcessingLatency(void) const { return m_outputPacketScheduledHardwareTime - m_inputPacketArrivedHardwareTime; }

private:
	void*			m_audioBuffer;
	long			m_sampleFrameCount;
	Deleter			m_deleter;

	BMDTimeValue	m_audioStreamTime;
	BMDTimeValue	m_inputPacketArrivedHardwareTime;
	BMDTimeValue	m_outputPacketScheduledHardwareTime;
};
